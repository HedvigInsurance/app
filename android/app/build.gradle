apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.apollographql.android'

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile

project.ext.react = [
        entryFile           : "index.android.js",
        bundleInStaging     : true,
        devDisabledInStaging: true
]

apply from: '../../node_modules/react-native/react.gradle'
apply from: "../../node_modules/react-native-sentry/sentry.gradle"

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false


apollo {
    generateModelBuilder = true
    customTypeMapping = [
            "URL"      : "java.lang.String",
            "LocalDate": "org.threeten.bp.LocalDate"
    ]
}

apply plugin: 'com.jaredsburrows.license'
licenseReport {
    copyHtmlReportToAssets = true
}

android {
    compileSdkVersion 28

    defaultConfig {
        targetSdkVersion 28
        applicationId project.env.get('APP_ID')
        minSdkVersion 21
        multiDexEnabled true
        versionCode 43
        versionName '2.8.0'

        resValue "string", "build_config_package", "com.hedvig.app"
        vectorDrawables.useSupportLibrary = true
        ndk {
            abiFilters 'armeabi-v7a', 'x86'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true
            include 'armeabi-v7a', 'x86'
        }
    }

    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        staging {

        }

        debug {
            debuggable true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ['armeabi-v7a': 1, 'x86': 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {
                output.versionCodeOverride = versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    configurations.all {
        resolutionStrategy.force 'android.arch.lifecycle:livedata-core:1.1.0'
        resolutionStrategy.force 'android.arch.core:runtime:1.1.0'
        resolutionStrategy.force 'android.arch.core:common:1.1.0'
    }
}

dependencies {
    implementation project(':react-native-image-picker')
    implementation project(':react-native-fs')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-svg')
    implementation project(':react-native-config')
    implementation project(':react-native-sound')
    implementation project(':react-native-sentry')
    implementation project(':react-native-branch')
    implementation project(':react-native-audio')
    implementation project(':react-native-analytics-segment-io')
    implementation project(':lottie-react-native')


    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'
    implementation 'nl.littlerobots.rxlint:rxlint:1.7.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "com.android.support:design:${rootProject.ext.supportLibVersion}"

    // Android support
    def support_version = "28.0.0"
    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:exifinterface:$support_version"
    implementation "com.android.support:support-media-compat:$support_version"
    implementation "com.android.support:support-v4:$support_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support:design:$support_version"

    // Android lifecycle
    def lifecycle_version = "1.1.0"
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    kapt "android.arch.lifecycle:compiler:$lifecycle_version"


    // WorkManager
    def workmanager_version = "1.0.1"
    implementation "android.arch.work:work-runtime:$workmanager_version"
    implementation "android.arch.work:work-runtime-ktx:$workmanager_version"

    // Okhttp
    def okhttp3_version = '3.12.0'
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttp3_version"

    // Apollo
    implementation "com.apollographql.apollo:apollo-runtime:$apollo_version"
    implementation "com.apollographql.apollo:apollo-android-support:$apollo_version"
    implementation "com.apollographql.apollo:apollo-rx2-support:$apollo_version"
    androidTestImplementation "com.apollographql.apollo:apollo-espresso-support:$apollo_version"

    // Firebase
    implementation 'com.google.android.gms:play-services-base:16.1.0'
    releaseImplementation 'com.crashlytics.sdk.android:crashlytics:2.10.0'
    stagingImplementation 'com.crashlytics.sdk.android:crashlytics:2.10.0'

    implementation "com.google.firebase:firebase-core:16.0.8"
    implementation "com.google.firebase:firebase-dynamic-links:16.1.8"
    implementation "com.google.firebase:firebase-firestore:18.2.0"
    implementation 'com.google.firebase:firebase-config:16.5.0'
    implementation "com.google.firebase:firebase-messaging:17.5.0"

    // Segment
    implementation 'com.google.android.gms:play-services-ads:15.0.1'
    implementation 'com.segment.analytics.android:analytics:4.2.6'
    implementation 'com.android.support:multidex:1.0.3'
    // compile 'io.branch.segment.analytics.android.integrations:branch:1.0.2-RELEASE'

    implementation 'io.branch.sdk.android:library:3.1.2'

    // Animated GIF support
    implementation 'com.facebook.fresco:animated-gif:1.11.0'

    // Dagger
    def dagger_version = "2.22.1"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    implementation 'net.ypresto.timbertreeutils:timbertreeutils:1.0.0'

    def navigation_version = '1.0.0'
    implementation "android.arch.navigation:navigation-fragment:$navigation_version"
    implementation "android.arch.navigation:navigation-ui:$navigation_version"
    implementation "android.arch.navigation:navigation-runtime-ktx:$navigation_version"

    // Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Lottie
    implementation "com.airbnb.android:lottie:2.5.5"

    // Exoplayer
    implementation 'com.google.android.exoplayer:exoplayer:2.7.3'

    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.0'

    // coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'

    // Svg
    implementation 'com.caverock:androidsvg-aar:1.3'

    // Restring
    implementation 'com.ice.restring:restring:1.0.0'

    // Glide
    implementation "com.github.bumptech.glide:glide:4.9.0"
    kapt 'com.github.bumptech.glide:compiler:4.9.0'


    // test
    testImplementation 'junit:junit:4.12'

    debugApi 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    releaseApi 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'
}

apply plugin: 'com.google.gms.google-services'
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true

apply plugin: 'com.hedvig.textkeys'

textkeys {
    graphqlEndpoint = 'https://api-euwest.graphcms.com/v1/cjmawd9hw036a01cuzmjhplka/master'
    defaultLanguageCode = 'sv_SE'
    excludedLanguages = ['en_SE']
}

task updateSchema(type: Exec) {
    group = 'GraphQL'
    description = 'Fetches the latest schema from our dev GraphQL-server'

    commandLine 'apollo', 'schema:download', '--endpoint=https://graphql.dev.hedvigit.com/graphql', "$projectDir/src/main/graphql/com/hedvig/android/owldroid/schema.json"
}
