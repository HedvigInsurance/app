import { connect } from 'react-redux';
import React, { Fragment } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  BackHandler,
  StyleSheet,
  ActivityIndicator,
  Linking,
  Dimensions,
  Keyboard,
} from 'react-native';
import * as R from 'ramda';
import PopupDialog from 'react-native-popup-dialog';

import {
  BANKID_SIGN,
  BANKID_SIGN_CANCEL,
  BANKID_DIALOG_SHOWN,
  BANKID_DIALOG_DISMISSED,
} from './actions';

import { colors } from '@hedviginsurance/brand';

const styles = StyleSheet.create({
  dialog: {
    backgroundColor: colors.TRANSPARENT,
    justifyContent: 'center',
    zIndex: 100,
  },
  content: {
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: colors.WHITE,
    borderRadius: 8,
    paddingTop: 10,
  },
  status: {
    fontFamily: 'CircularStd-Book',
    fontSize: 20,
    lineHeight: 28,
    marginTop: 20,
    paddingBottom: 25,
    paddingLeft: 20,
    paddingRight: 20,
    textAlign: 'center',
  },
  loader: {
    marginTop: 30,
  },
  buttonContainer: {
    width: '100%',
    borderTopWidth: 1,
    borderTopColor: colors.OFF_WHITE,
    flexDirection: 'row',
  },
  button: {
    flex: 1,
    height: 55,
    alignItems: 'center',
    justifyContent: 'center',
  },
  buttonRightBorder: {
    borderRightWidth: 1,
    borderRightColor: colors.OFF_WHITE,
  },
  buttonText: {
    fontFamily: 'CircularStd-Book',
    fontSize: 18,
    lineHeight: 25,
    color: colors.PURPLE,
    textAlign: 'center',
  },
  buttonTextIsPrimary: {
    fontFamily: 'CircularStd-Bold',
  },
  bankIdLink: { color: '#555555', textDecorationLine: 'underline' },
});

const UNKNOWN_ERROR_MESSAGE = `Ojd√•! Ok√§nt fel üôà`;
const messages = [
  {
    status: 'pending',
    hintCode: 'outstandingTransaction',
    getMessage: (isSigning, hasClientFailedToOpen) =>
      `${
        hasClientFailedToOpen
          ? `Starta BankID-appen`
          : `F√∂rs√∂ker starta BankID-appen`
      }`,
  },
  {
    status: 'pending',
    hintCode: 'noClient',
    getMessage: () => 'Starta BankID-appen',
  },
  {
    status: 'pending',
    hintCode: 'started',
    getMessage: (isSigning) =>
      `üïµÔ∏è‚Äç S√∂ker efter BankID, det kan ta en liten stund‚Ä¶ Om det har g√•tt n√•gra sekunder och inget BankID har hittats har du sannolikt inget BankID som g√•r att anv√§nda f√∂r den aktuella ${
        isSigning ? 'underskriften' : 'inloggningen'
      } i den h√§r enheten. Om du inte har n√•got BankID kan du h√§mta ett hos din internetbank. Om du har ett BankID p√• en annan enhet kan du starta din BankID-app d√§r`,
  },
  {
    status: 'pending',
    hintCode: 'userSign',
    getMessage: () =>
      `Skriv in din s√§kerhetskod i BankID-appen och v√§lj Legitimera`,
  },
  {
    status: 'pending',
    hintCode: 'unknown',
    getMessage: (isSigning) =>
      `${isSigning ? 'Signering' : 'Inloggning'} p√•g√•r`,
  },
  {
    status: 'complete',
    hintCode: 'unknown',
    getMessage: (isSigning) =>
      `${isSigning ? 'Signering godk√§nd üëå' : 'Inloggning lyckades üëã'}`,
  },
  {
    status: 'failed',
    hintCode: 'expiredTransaction',
    getMessage: () =>
      `BankID-appen svarar inte. Kontrollera att den √§r startad och att du har internetanslutning. Om du inte har n√•got giltigt BankID kan du h√§mta ett hos din Bank. F√∂rs√∂k sedan igen`,
  },
  {
    status: 'failed',
    hintCode: 'certificateErr',
    getMessage: () =>
      `Det BankID du f√∂rs√∂ker anv√§nda √§r f√∂r gammalt eller sp√§rrat. Anv√§nd ett annat BankID eller h√§mta ett nytt hos din internetbank`,
  },
  {
    status: 'failed',
    hintCode: 'userCancel',
    getMessage: (isSigning) =>
      `${isSigning ? 'Signering' : 'Inloggning'} avbruten üôÖ‚Äç`,
  },
  {
    status: 'failed',
    hintCode: 'cancelled',
    getMessage: (isSigning) =>
      `${isSigning ? 'Signering' : 'Inloggning'} avbruten üôÖ‚Äç`,
  },
  {
    status: 'failed',
    hintCode: 'startFailed',
    getMessage: () => [
      `BankID-appen verkar inte finnas i din telefon. Installera den och h√§mta ett BankID hos din internetbank. Installera appen fr√•n `,
      <Text
        key={'bankid-link'}
        style={styles.bankIdLink}
        onPress={() => Linking.openURL('https://install.bankid.com')}
      >
        install.bankid.com
      </Text>,
    ],
  },
  {
    status: 'failed',
    hintCode: 'invalidParameters',
    getMessage: () => UNKNOWN_ERROR_MESSAGE,
  },
  {
    status: 'failed',
    hintCode: 'alreadyInProgress',
    getMessage: (isSigning) =>
      `Avbryter tidigare ${
        isSigning ? 'signering' : 'inloggning'
      }, v√§nta n√•gra sekunder och f√∂rs√∂k sedan igen`,
  },
  {
    status: 'failed',
    hintCode: 'requestTimeout',
    getMessage: () => UNKNOWN_ERROR_MESSAGE,
  },
  {
    status: 'failed',
    hintCode: 'internalError',
    getMessage: () => UNKNOWN_ERROR_MESSAGE,
  },
  {
    status: 'failed',
    hintCode: 'Maintenance',
    getMessage: () => UNKNOWN_ERROR_MESSAGE,
  },
  {
    status: 'failed',
    hintCode: 'unknown',
    getMessage: () => UNKNOWN_ERROR_MESSAGE,
  },
];

const { width: viewportWidth } = Dimensions.get('window');

class Dialog extends React.Component {
  componentDidMount() {
    BackHandler.addEventListener('hardwareBackPress', this._signCancel);
  }

  componentWillUnmount() {
    BackHandler.removeEventListener('hardwareBackPress', this._signCancel);
  }

  componentDidUpdate() {
    if (this.props.bankid.sign.isCurrentlySigning) {
      this._show();
    } else {
      this._dismiss();
    }
  }

  _show() {
    if (!this.props.bankid.isDialogOpen) {
      Keyboard.dismiss();
      this.popupDialog.show();
    }
  }

  _dismiss() {
    if (this.props.bankid.isDialogOpen) {
      this.popupDialog.dismiss();
    }
  }

  _signCancel = () => this.props.signCancel();

  _getHintCode() {
    const { response } = this.props.bankid.collect;
    return response.hintCode || response.errorCode || 'unknown';
  }

  getStatus() {
    const { response } = this.props.bankid.collect;
    return response.errorCode ? 'failed' : response.status || 'pending';
  }

  getMessage() {
    const status = this.getStatus();
    const hintCode = this._getHintCode();
    const statusMessages = R.filter(R.propEq('status', status), messages);
    const message = R.find(R.propEq('hintCode', hintCode))(statusMessages);
    const { hasClientFailedToOpen } = this.props.bankid.sign;
    const msg = message && message.getMessage(true, hasClientFailedToOpen);
    // report sentry if no msg
    return msg || UNKNOWN_ERROR_MESSAGE;
  }

  render() {
    const { isCurrentlySigning } = this.props.bankid.sign;
    const { isDialogOpen } = this.props.bankid;
    return (
      <PopupDialog
        ref={(popupDialog) => {
          this.popupDialog = popupDialog;
        }}
        dismissOnTouchOutside={false}
        width={viewportWidth - 60}
        height={1}
        style={styles.backdrop}
        onShown={this.props.dialogShown}
        onDismissed={this.props.dialogDismissed}
        dialogStyle={styles.dialog}
      >
        {isDialogOpen &&
          isCurrentlySigning && (
            <View style={styles.content}>
              {this.getStatus() === 'pending' && (
                <Fragment>
                  <ActivityIndicator
                    style={styles.loader}
                    size="large"
                    color="#651EFF"
                  />
                  <Text style={styles.status}>{this.getMessage()}</Text>
                  <View style={styles.buttonContainer}>
                    <TouchableOpacity
                      style={styles.button}
                      onPress={() => this.props.signCancel()}
                      accessibilityTraits="button"
                      accessibilityComponentType="button"
                    >
                      <Text style={styles.buttonText}>Avbryt</Text>
                    </TouchableOpacity>
                  </View>
                </Fragment>
              )}
              {this.getStatus() === 'complete' && (
                <Fragment>
                  <Text style={styles.status}>{this.getMessage()}</Text>
                </Fragment>
              )}
              {this.getStatus() === 'failed' && (
                <Fragment>
                  <Text style={styles.status}>{this.getMessage()}</Text>

                  <View style={styles.buttonContainer}>
                    <TouchableOpacity
                      style={[styles.button, styles.buttonRightBorder]}
                      onPress={() => this.props.signCancel()}
                      accessibilityTraits="button"
                      accessibilityComponentType="button"
                    >
                      <Text style={[styles.buttonText]}>St√§ng</Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                      style={styles.button}
                      onPress={() => this.props.signRetry()}
                      accessibilityTraits="button"
                      accessibilityComponentType="button"
                    >
                      <Text
                        style={[styles.buttonText, styles.buttonTextIsPrimary]}
                      >
                        F√∂rs√∂k igen
                      </Text>
                    </TouchableOpacity>
                  </View>
                </Fragment>
              )}
            </View>
          )}
      </PopupDialog>
    );
  }
}

const mapStateToProps = (state) => {
  return {
    bankid: state.bankid,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    signRetry: () =>
      dispatch({
        type: BANKID_SIGN,
      }),
    signCancel: () =>
      dispatch({
        type: BANKID_SIGN_CANCEL,
      }),
    dialogShown: () =>
      dispatch({
        type: BANKID_DIALOG_SHOWN,
      }),
    dialogDismissed: () =>
      dispatch({
        type: BANKID_DIALOG_DISMISSED,
      }),
  };
};

const DialogContainer = connect(
  mapStateToProps,
  mapDispatchToProps,
)(Dialog);

export { DialogContainer as Dialog };
